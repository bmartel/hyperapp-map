{"version":3,"sources":["dist/hyperappmap.js"],"names":["hyperappmap","exports","isFunc","x","isArray","Array","isAction","action","deepMap","map","getResult","state","payload","mapObj","obj","fn","Object","entries","k","v","reduce","o","mapEach","f","y","mapSubs","opt","mapVNode","vnode","props","startsWith","pass","children","child","makeMap","extract","merge","memoizedMap","actionFn","mappedAction","memo","get","data","subResult","fullResult","actualMap","slice","rawMap","set","Map","actionStack","mapPass"],"mappings":"AAAA,IAAIA,YAAe,SAAUC,GACzB,MAAMC,EAASC,GAAkB,mBAANA,EACrBC,EAAUD,GAAKE,MAAMD,QAAQD,GAC7BG,EAAWC,GACbL,EAAOK,IAAYH,EAAQG,IAAWD,EAASC,EAAO,IAEpDC,EAAU,CAACC,EAAKF,IAClBL,EAAOK,GAAUE,EAAIF,GAAU,CAACC,EAAQC,EAAKF,EAAO,IAAKA,EAAO,IAE9DG,EAAY,CAACH,EAAQI,EAAOC,IAC9BV,EAAOK,GACDG,EAAUH,EAAOI,EAAOC,GAAUD,GACjCP,EAAQG,GAETD,EAASC,GACTG,EACIH,EAAO,GACPI,EACAT,EAAOK,EAAO,IAAMA,EAAO,GAAGK,GAAWL,EAAO,IAEpDA,EAPA,CAACA,GAmCLM,EAAS,CAACJ,EAAKK,EAAKC,IACtBC,OAAOC,QAAQH,GACVL,IAAI,EAAES,EAAGC,KAAO,CAACD,EAAGH,EAAGG,EAAGC,KAC1BC,OAAO,CAACC,GAAIH,EAAGC,MAASE,EAAEH,GAAKC,EAAIE,GAAI,IAE1CC,EAAUC,GAAK,CAACd,EAAKN,IACvBC,EAAQD,GAAKA,EAAEM,IAAIe,GAAKD,EAAEd,EAAKe,IAAMD,EAAEd,EAAKN,GAE1CsB,EAAUH,EAAQ,CAACb,GAAMM,EAAIW,KAAS,CACxCX,EACAF,EAAOJ,EAAKiB,EAAK,CAACR,EAAGC,IAAOb,EAASa,GAAKV,EAAIU,GAAKA,KAGjDQ,EAAWL,EAAQ,CAACb,EAAKmB,IAC3BA,EAAMC,MACA,IACOD,EACHC,MAAOhB,EAAOJ,EAAKmB,EAAMC,MAAO,CAACX,EAAGC,IAC/BA,GAASD,EAAEY,WAAW,MAAYX,EAAEY,KAAOZ,EAAEY,KAAOtB,EAAIU,GAApDA,GAETa,SAAUJ,EAAMI,SAASvB,IAAIwB,GAASN,EAASlB,EAAKwB,KAExDL,GAUV,OALA3B,EAAQiC,QArDQ,CAACC,EAASC,KACtB,IAWIC,EAAcC,IACd,IAAIC,EAAeF,EAAYG,KAAKC,IAAIH,GAKxC,OAJKC,IACDA,EAdKD,CAAAA,GAAY,CACrB3B,EACA+B,EACAC,EAAYjC,EAAU4B,EAAUH,EAAQxB,GAAQ+B,GAChDE,EAAalC,EAAU0B,EAAOzB,EAAOgC,EAAU,MAC9C,CACDC,EAAW,MACRnB,EAAQoB,EAAWF,EAAUG,MAAM,OACnCF,EAAWE,MAAM,IAMDC,CAAOT,GACtBD,EAAYG,KAAKQ,IAAIV,EAAUC,IAE5BA,GAEXF,EAAYG,KAAO,IAAIS,IAEvB,IAAIJ,EAAYK,GAAe1C,EAAQ6B,EAAaa,GACpD,OAAOL,GA+BX5C,EAAQkD,QAHQhD,GAAKwB,EAASI,IAAQ,CAAGA,KAAAA,IAAS5B,GAIlDF,EAAQwB,QAAUA,EAClBxB,EAAQ0B,SAAWA,EAEZ1B,EAhFO,CAkFhB","sourcesContent":["var hyperappmap = (function (exports) {\n    const isFunc = x => typeof x === 'function';\n    const isArray = x => Array.isArray(x);\n    const isAction = action =>\n        isFunc(action) || (isArray(action) && isAction(action[0]));\n\n    const deepMap = (map, action) =>\n        isFunc(action) ? map(action) : [deepMap(map, action[0]), action[1]];\n\n    const getResult = (action, state, payload) =>\n        isFunc(action)\n            ? getResult(action(state, payload), state)\n            : !isArray(action)\n            ? [action]\n            : isAction(action)\n            ? getResult(\n                  action[0],\n                  state,\n                  isFunc(action[1]) ? action[1](payload) : action[1]\n              )\n            : action;\n\n    const makeMap = (extract, merge) => {\n        let rawMap = actionFn => (\n            state,\n            data,\n            subResult = getResult(actionFn, extract(state), data),\n            fullResult = getResult(merge, state, subResult[0])\n        ) => [\n            fullResult[0],\n            ...mapSubs(actualMap, subResult.slice(1)),\n            ...fullResult.slice(1),\n        ];\n\n        let memoizedMap = actionFn => {\n            let mappedAction = memoizedMap.memo.get(actionFn);\n            if (!mappedAction) {\n                mappedAction = rawMap(actionFn);\n                memoizedMap.memo.set(actionFn, mappedAction);\n            }\n            return mappedAction\n        };\n        memoizedMap.memo = new Map();\n\n        let actualMap = actionStack => deepMap(memoizedMap, actionStack);\n        return actualMap\n    };\n\n    const mapObj = (map, obj, fn) =>\n        Object.entries(obj)\n            .map(([k, v]) => [k, fn(k, v)])\n            .reduce((o, [k, v]) => ((o[k] = v), o), {});\n\n    const mapEach = f => (map, x) =>\n        isArray(x) ? x.map(y => f(map, y)) : f(map, x);\n\n    const mapSubs = mapEach((map, [fn, opt]) => [\n        fn,\n        mapObj(map, opt, (k, v) => (isAction(v) ? map(v) : v)),\n    ]);\n\n    const mapVNode = mapEach((map, vnode) =>\n        vnode.props\n            ? {\n                  ...vnode,\n                  props: mapObj(map, vnode.props, (k, v) =>\n                      !v ? v : !k.startsWith('on') ? v : v.pass ? v.pass : map(v)\n                  ),\n                  children: vnode.children.map(child => mapVNode(map, child)),\n              }\n            : vnode\n    );\n\n    const mapPass = x => mapVNode(pass => ({ pass }), x);\n\n    exports.makeMap = makeMap;\n    exports.mapPass = mapPass;\n    exports.mapSubs = mapSubs;\n    exports.mapVNode = mapVNode;\n\n    return exports;\n\n}({}));\n//# sourceMappingURL=hyperappmap.js.map\n"]}